q = 12289
M = 512
primitiveRoot = 3
sqrtOfPrimitiveRoot = 1321
primitiveRootInverse = 8193
MInv = 12265
sqrtOfPrimitiveRootPow = [1,1321,3,3963,9,11889,27,11089,81,8689,243,1489,729,4467,2187,1112,6561,3336,7394,10008,9893,5446,5101,4049,3014,12147,9042,11863,2548,11011,7644,8455,10643,787,7351,2361,9764,7083,4714,8960,1853,2302,5559,6906,4388,8429,875,709,2625,2127,7875,6381,11336,6854,9430,8273,3712,241,11136,723,8830,2169,1912,6507,5736,7232,4919,9407,2468,3643,7404,10929,9923,8209,5191,49,3284,147,9852,441,4978,1323,2645,3969,7935,11907,11516,11143,9970,8851,5332,1975,3707,5925,11121,5486,8785,4169,1777,218,5331,654,3704,1962,11112,5886,8758,5369,1696,3818,5088,11454,2975,9784,8925,4774,2197,2033,6591,6099,7484,6008,10163,5735,5911,4916,5444,2459,4043,7377,12129,9842,11809,4948,10849,2555,7969,7665,11618,10706,10276,7540,6250,10331,6461,6415,7094,6956,8993,8579,2401,1159,7203,3477,9320,10431,3382,6715,10146,7856,5860,11279,5291,9259,3584,3199,10752,9597,7678,4213,10745,350,7657,1050,10682,3150,7468,9450,10115,3772,5767,11316,5012,9370,2747,3532,8241,10596,145,7210,435,9341,1305,3445,3915,10335,11745,6427,10657,6992,7393,8687,9890,1483,5092,4449,2987,1058,8961,3174,2305,9522,6915,3988,8456,11964,790,11314,2370,9364,7110,3514,9041,10542,2545,7048,7635,8855,10616,1987,7270,5961,9521,5594,3985,4493,11955,1190,11287,3570,9283,10710,3271,7552,9813,10367,4861,6523,2294,7280,6882,9551,8357,4075,493,12225,1479,12097,4437,11713,1022,10561,3066,7105,9198,9026,3016,2500,9048,7500,2566,10211,7698,6055,10805,5876,7837,5339,11222,3728,9088,11184,2686,8974,8058,2344,11885,7032,11077,8807,8653,1843,1381,5529,4143,4298,140,605,420,1815,1260,5445,3780,4046,11340,12138,9442,11836,3748,10930,11244,8212,9154,58,2884,174,8652,522,1378,1566,4134,4698,113,1805,339,5415,1017,3956,3051,11868,9153,11026,2881,8500,8643,922,1351,2766,4053,8298,12159,316,11899,948,11119,2844,8779,8532,1759,1018,5277,3054,3542,9162,10626,2908,7300,8724,9611,1594,4255,4782,476,2057,1428,6171,4284,6224,563,6383,1689,6860,5067,8291,2912,295,8736,885,1630,2655,4890,7965,2381,11606,7143,10240,9140,6142,2842,6137,8526,6122,1000,6077,3000,5942,9000,5537,2422,4322,7266,677,9509,2031,3949,6093,11847,5990,10963,5681,8311,4754,355,1973,1065,5919,3195,5468,9585,4115,4177,56,242,168,726,504,2178,1512,6534,4536,7313,1319,9650,3957,4372,11871,827,11035,2481,8527,7443,1003,10040,3009,5542,9027,4337,2503,722,7509,2166,10238,6498,6136,7205,6119,9326,6068,3400,5915,10200,5456,6022,4079,5777,12237,5042,12133,2837,11821,8511,10885,955,8077,2865,11942,8595,11248,1207,9166,3621,2920,10863,8760,8011,1702,11744,5106,10654,3029,7384,9087,9863,2683,5011,8049,2744,11858,8232,10996,118,8410,354,652,1062,1956,3186,5868,9558,5315,4096,3656]
sqrtOfPrimitiveRootPowInv = [1,8633,8193,6974,2731,6421,9103,10333,11227,11637,11935,3879,12171,1293,4057,431,9545,4240,7278,9606,2426,3202,4905,9260,1635,7183,545,10587,4278,3529,1426,9369,8668,3123,11082,1041,3694,347,9424,4212,11334,1404,3778,468,9452,156,7247,52,6512,8210,6267,6833,2089,6374,8889,6221,2963,6170,5084,6153,5791,2051,10123,4780,11567,9786,7952,3262,6747,9280,2249,11286,4846,3762,9808,1254,11462,418,7917,8332,2639,10970,4976,7753,5755,10777,10111,11785,11563,12121,12047,12233,8112,8174,2704,6821,9094,6370,11224,10316,11934,7535,3978,6608,1326,6299,442,6196,8340,10258,2780,11612,5023,7967,9867,6752,3289,6347,9289,6212,11289,6167,3763,6152,9447,6147,3149,2049,5146,683,9908,4324,7399,9634,10659,11404,3553,11994,9377,3998,7222,5429,10600,5906,11726,6065,8005,6118,10861,10232,11813,7507,8034,10695,2678,3565,4989,9381,1663,3127,8747,9235,7012,11271,10530,3757,3510,9445,1170,11341,390,11973,130,3991,8236,9523,10938,11367,3646,3789,9408,1263,3136,421,9238,8333,11272,6874,11950,10484,12176,7591,8155,10723,10911,11767,3637,12115,9405,12231,3135,4077,1045,1359,8541,453,2847,151,949,8243,8509,6844,11029,10474,11869,11684,12149,7991,8146,6760,10908,10446,3636,3482,1212,5257,404,9945,4231,3315,9603,1105,3201,8561,1067,6950,4452,6413,1484,6234,4591,2078,9723,4789,3241,9789,9273,3263,3091,5184,9223,1728,11267,576,7852,192,10810,64,11796,8214,3932,2738,5407,5009,9995,5766,7428,1922,2476,4737,9018,1579,3006,8719,1002,11099,334,7796,8304,6695,2768,6328,5019,10302,1673,3434,4654,5241,9744,1747,3248,8775,5179,2925,9919,975,11499,325,3833,8301,5374,2767,9984,9115,3328,11231,9302,7840,7197,10806,2399,3602,4896,5297,1632,5862,544,1954,8374,8844,10984,2948,11854,5079,12144,1693,4048,8757,9542,2919,7277,973,6522,8517,2174,2839,4821,9139,1607,11239,4632,11939,1544,8076,4611,2692,1537,9090,8705,3030,6998,1010,6429,4433,2143,5574,8907,1858,2969,8812,5086,11130,9888,3710,3296,5333,5195,5874,5828,1958,6039,4749,2013,1583,671,4624,4320,9734,1440,7341,480,2447,160,4912,8246,9830,6845,7373,6378,6554,2126,6281,4805,6190,5698,10256,10092,7515,3364,2505,9314,835,7201,8471,10593,6920,3531,6403,1177,10327,8585,11635,6958,12071,10512,8120,3504,6803,1168,6364,8582,10314,6957,3438,2319,1146,773,382,4354,8320,9644,10966,7311,11848,2437,12142,9005,12240,7098,4080,2366,1360,4885,8646,9821,2882,7370,5057,6553,5782,10377,10120,3459,11566,1153,12048,8577,4016,2859,5435,953,5908,4414,10162,9664,11580,11414,3860,7901,5383,6730,9987,10436,3329,7575,5206,2525,9928,4938,11502,1646,3834,4645,1278,9741,426,3247,142,9275,8240,7188,6843,2396,2281,4895,8953,5728,11177,10102,7822,11560,10800,12046,3600,12208,1200,12262,400,12280,8326,12286,10968]
primitiveRootTable = [12288, 1479, 4043, 5736, 10643, 6561, 81, 9, 3]
primitiveRootInverseTable = [12288, 10810, 5146, 11567, 8668, 9545, 11227, 2731, 8193]

def modulus(n, m):
	return ((n % m) + m) % m;

def modPow(a, b, mod):
	x = 1
	y = a
	while (b > 0):
		if ((b & 1) == 1):
			x *= y
			x = modulus(x, mod)
		y *= y
		y = modulus(y, mod)
		b >>= 1
	return x

def modInv(a, mod):
	return modPow(a, mod - 2, mod)

def NTT(a, invert):
	n = M
	if (not invert):
		# Multiplying by the mpodular square root of the primitive root
		i = 0
		while (i < n):
			a[i] *= sqrtOfPrimitiveRootPow[i]
			a[i] = modulus(a[i], q)
			i += 1
	#bit reversing
	i = 1
	j = 0
	while (i < n):
		bit = n >> 1;
		while (j >= bit):
			j -= bit
			bit >>= 1
		j += bit
		if (i < j):
			a[i] ^= a[j]
			a[j] ^= a[i]
			a[i] ^= a[j]
		i += 1
	#end of bit reversing
	# Now we do the NTT
	lenn = 2
	idx = 0
	while (lenn <= n):
		wlen = primitiveRootInverseTable[idx] if invert else primitiveRootTable[idx]
		i = lenn
		i = 0
		while (i < n):
			w = 1
			j = 0
			while (j < lenn // 2):
				u = a[i + j]
				v = modulus(a[i + j + lenn // 2] * w, q)
				a[i + j] = modulus(u + v, q)
				a[i + j + lenn // 2] = modulus(u - v, q)
				w *= wlen
				w = modulus(w, q)
				j += 1
			i += lenn
		idx += 1
		lenn <<= 1
	# Now we do the inverse
	if (invert):
		nInv = MInv
		i = 0
		while (i < n):
			a[i] *= nInv
			a[i] = modulus(a[i], q)
			a[i] *= sqrtOfPrimitiveRootPowInv[i]
			a[i] = modulus(a[i], q)
			i += 1
	return a


p = [1, 2, 3, 4] + ([0] * (M - 4))
NTT(p, False)
print(p)
NTT(p, True)
print(p)


# import random
# import time

# for i in range(0, 100):
# 	p = [0] * M
# 	start = time.time()
# 	knuthYao(p, q)
# 	print(time.time() - start)
